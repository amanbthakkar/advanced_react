#########################################
import React, { useState } from "react";

const ErrorExample = () => { //has to be uppercase
  // console.log(useState("Hello")); //returns an array [value, function_that_changes_that_value]
  // const value = useState("Aman")[0];
  // const handler = useState("Aman")[1];
  const [text, setText] = useState("Aman"); //hooks have to start with use
  //this is array destructuring btw
  //serves as initial value
  //text is the value, setText is the function which is invoked to change this value
  //convention is to use <var>, <setVar>
  const clickHandler = () => {
    if (text === "Aman") setText("Riya");
    else setText("Aman");
  };
  return (
    <React.Fragment>
      <div className="container">
        <h2>Hii {text}</h2>
        <button type="button" className="btn" onClick={clickHandler}>
          Change name
        </button>
      </div>
    </React.Fragment>
  );
};

export default ErrorExample;

#####################################################################


->>>>Hooks have to start with use
->>>>>the components that have hooks have to be UpperCase (TitleCase)
->>>>>the hook line cannot be defined outside function body
#####################################################################

import React from "react";
import { data } from "../../../data";
//can look at file for the example array
const UseStateArray = () => {
  const [people, setPeople] = React.useState(data); //data array, can import inline also
  const [action, setAction] = React.useState("Delete");
  const deletePeople = () => {
    if (people.length > 0) {
      setPeople([]);
      setAction("Get Back");
    } else {
      setPeople(data);
      setAction("Delete");
    }
  };

  return (
    <>
      {people.map((person) => {
        const { id, name } = person;
        return (
          <div className="item" key={id}>
            <h4>{name}</h4>
          </div>
        );
      })}
      <button type="button" className="btn" onClick={deletePeople}>
        {action} People
      </button>
    </>
  );
};

export default UseStateArray;

#####################################################################

NOTE-> you can also define the hook function inside onClick = {}, but remember it should 
be an arrow {()=>function} because simple { function()} will get invoked immediately

let newPeople = people.filter((person) => person.id != id);
FILTER METHOD IS IMPORTANT, just like map!

import React from "react";
import { data } from "../../../data";
//can look at file for the example array
const UseStateArray = () => {
  const [people, setPeople] = React.useState(data); //data array, can import inline also
  const [action, setAction] = React.useState("Delete");
  const deletePeople = () => {
    if (people.length > 0) {
      setPeople([]);
      setAction("Get Back");
    } else {
      setPeople(data);
      setAction("Delete");
    }
  };
  const removeItem = (id) => {
    //filter out the matching id;
    let newPeople = people.filter((person) => person.id != id);
    setPeople(newPeople);
    if (newPeople.length > 0) setAction("Delete");
    else setAction("Get Back");
  };
  return (
    <>
      {people.map((person) => {
        const { id, name } = person;
        return (
          <div className="item" key={id}>
            <h4>{name}</h4>
            <button type="button" onClick={() => removeItem(id)}>
              Remove
            </button>
          </div>
        );
      })}
      <button type="button" className="btn" onClick={deletePeople}>
        {action} People
      </button>
    </>
  );
};

export default UseStateArray;


#AGAIN V V V IMP, if passing argument to function, always make it arrow function rather than just reference
or else it will get invoked RIGHT AWAY!

###############################################################################
For OBJECTS:

const UseStateObject = () => {
  const [person, setPerson] = useState({
    name: "Peter",
    age: "24",
    message: "Random message",
  });
  console.log(person);
  function changeMessage() {
    // setPerson("Hello world!"); //this will wipe out the whole obj and replace with one string!
    //SO USE A SPREAD OPERATOR!!
    setPerson({ ...person, message: "Hello world" });
  }

###############################################################################
  const UseStateCounter = () => {
  const [value, setValue] = useState(0);
  const complexIncrease = () => {
    setTimeout(() => {
      // setValue(value + 1);
      setValue((prevState) => {
        //basically have an other arrow function inside, parameter is prevValue
        return prevState + 1; //always return something!
      });
    }, 2000);
  };

  //does not work if you click multiple times before 2 seconds are up!!
  //the setValue function is async
  return (
    <React.Fragment>
      <section
        style={{ margin: "4rem 0", padding: "2rem 0", border: "2px solid red" }}
      >
        <h2>Regular counter</h2>
        <h1>{value}</h1>
        <button className="btn" onClick={() => setValue(value - 1)}>
          Decrease
        </button>
        <button className="btn" onClick={() => setValue(0)}>
          Reset
        </button>
        <button className="btn" onClick={() => setValue(value + 1)}>
          Increase
        </button>
      </section>
      <br />
      <section
        style={{ margin: "4rem 0", padding: "2rem 0", border: "2px solid red" }}
      >
        <h2>Complex counter</h2>
        <h1>{value}</h1>
        <button className="btn" onClick={complexIncrease}>
          Increase later
        </button>
      </section>
    </React.Fragment>
  );
};

###############################################################################

USE EFFECT:

// by default runs after every re-render**
// cleanup function
// second parameter
const UseEffectBasics = () => {
  const [value, setValue] = useState(0);
  useEffect(() => {
    //stuff inside callback will run on every render
    console.log("Called after every render");
    if (value > 0) document.title = `New messages(${value})`;
  });
  console.log("Render component");
  return (
    <>
      <h2>{value}</h2>
      <button type="button" className="btn" onClick={() => setValue(value + 1)}>
        Change
      </button>
    </>
  );
};

export default UseEffectBasics;

//useEffects used when we want to set up some side effects outside of the component
//it runs at every re-render and hence can be used to change the title of the page and all
//data fetching, listening for events, signing up for subscriptions
//HOOKS CANT BE SET INSIDE IF

###############################################################################

// by default runs after every re-render
// cleanup function
// second parameter**
const UseEffectBasics = () => {
  const [value, setValue] = useState(0);
  useEffect(() => {
    //stuff inside callback will run on every render
    console.log("Called after every render");
    if (value > 0) document.title = `New messages(${value})`;
    // });//can also pass 2nd argument here!
  }, [value]); //if empty, it is not called on re-render
  console.log("Render component");
  return (
    <>
      <h2>{value}</h2>
      <button type="button" className="btn" onClick={() => setValue(value + 1)}>
        Change
      </button>
    </>
  );
};

export default UseEffectBasics;

//what else about the 2nd parameter?
//that array has values, and the function will run only if any of the values present in the
//array is changed. So if 'value' is changed by the setValue function, then the useEffect will run.
//otherwise it will not run.
//can have more than one useEffects! if you have another one with empty array then it will
//not be run on further re-renders!

###############################################################################

CLEANUP function
import React, { useState, useEffect } from "react";

// cleanup function
// second argument

const UseEffectCleanup = () => {
  const [size, setSize] = useState(window.innerWidth);

  const checkSize = () => {
    setSize(window.innerWidth);
    // window.removeEventListener("resize", checkSize); if I add this, then the value also stops changing!
  };
  useEffect(
    () => {
      console.log("There is a rerender");
      window.addEventListener("resize", checkSize); //it's checkSize, not checkSize()
      // return () => {
      //   console.log("Cleanup");
      //   window.removeEventListener("resize", checkSize);
      // };
    } /*,[]*/
  );
  return (
    <>
      <h1>window</h1>
      <h2>{size}</h2>
    </>
  );
};

export default UseEffectCleanup;

//want to set up a listener on the browser window
//remember - useState automatically triggers a rerender because of value change
//eventListener added each and everytime if:
//1. [] is not included
//2. cleanup is not applied
//eventListener is diff - once created it stays unless destroyed or cleaned up!
//this part if unclear is best understood thru video:
//https://youtu.be/4UZrsTqkcW4?t=19043
//whenever you set up side effects, it is good practice to set up cleanup functions to avoid
//too many listeners being created and having a memory leak

###############################################################################
FETCHING DATA AND ASYNC_AWAIT TRICKS

import React, { useState, useEffect } from "react";

const url = "https://api.github.com/users";

const UseEffectFetchData = () => {
  const [users, setUsers] = useState([]);

  const getUsers = async () => {
    const response = await fetch(url);
    const users = await response.json();
    setUsers(users);
    // console.log(users);
  };
  useEffect(() => {
    //we want a fetch request
    //useEffect cannot be an async function!!
    //async functions return a promise and that is not allowed here
    //so set up async Inside the callback, or as a separate function Outside
    getUsers();
  }, []); //add dependency array to prevent rerender on useState() - infinite loop avoiding
  return (
    <>
      <h1>Github users</h1>
      <ul className="users">
        {users.map((user) => {
          //add a key whenever you map over array!
          const { id, login, avatar_url, html_url } = user;
          return (
            <li key={id}>
              <img src={avatar_url} alt={login}></img>
              <div>
                <h4>{login}</h4>
                <a href={html_url}>Profile</a>
              </div>
            </li>
          );
        })}
      </ul>
    </>
  );
};

export default UseEffectFetchData;


###############################################################################

CONDITIONAL RENDERING

import React, { useState, useEffect } from "react";
const url = "https://api.github.com/users/QuincyLarson";
const MultipleReturns = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setisError] = useState(false);
  const [user, setUser] = useState("Default user");

  useEffect(() => {
    fetch(url)
      .then((resp) => {
        if (resp.status >= 200 && resp.status <= 299) {
          return resp.json();
        } else {
          setIsLoading(false);
          setisError(true);
          throw new Error(resp.statusText);
        } //check status here
      })
      .then((user) => {
        const { login } = user;
        setUser(login);
        setIsLoading(false);
      })
      .catch((error) => {
        //actually fetch errors are just network errors, not like 404 - data not found
        console.log(error);
      });
  }, []); //just initial render
  if (isLoading) {
    return (
      <div>
        <h1>Loading...</h1>
      </div>
    );
  }
  if (isError) {
    return (
      <div>
        <h1>Error...</h1>
      </div>
    );
  }
  const buttonClick = (user) => {
    console.log(`User is ${user}`);
  };
  const ref = buttonClick;
  return (
    <div>
      <h1>{user}</h1>
      <button className="btn" onClick={(x) => ref(x)}>
        Click me
      </button>
    </div>
  );
};

export default MultipleReturns;

###############################################################################

Short Circuit Evaluation:

import React, { useState } from "react";
// short-circuit evaluation
// ternary operator

const ShortCircuit = () => {
  const [text, setText] = useState("S"); //leave it empty for true and false
  const firstValue = text || "hello world"; //when true returns first value
  const secondValue = text && "hello world"; //when true returns second value, false returns first

  return (
    <>
      {/* <h1>{firstValue}</h1>
      <h1>Value:{secondValue}</h1> */}
      <h1>{text || "It's empty"}</h1>
      {/* returns 'Its empty' when the String is empty */}
      {text && <h1>Displayed if not empty, else nothing!</h1>}
      {!text && <h2>Displayed if empty, else nothing!</h2>}
    </>
  );
};

export default ShortCircuit;
//we need to return something in our JSX right,
//hence if statements are not allowed in react.
//that's why we use short circuit operators!
//so we can display something completely
//now we have done multiple returns for multiple cases,
//but conditional rendering is where you want to show or hide something based on a condition

// for or operator, if LHS is true then LHS is returned
// for and operator, if LHS is true then RHS is returned
// and if LHS is false then nothing is returned

###############################################################################

Terneray operator:

const TestComponent = () => {
  return (
    <ul>
      <li>This is displayed</li>
      <li>As a test component</li>
      <li>When the error is false</li>
    </ul>
  );
};

const ShortCircuit = () => {
  const [text, setText] = useState(""); //leave it empty for true and false
  // const firstValue = text || "hello world"; //when true returns first value
  // const secondValue = text && "hello world"; //when true returns second value, false returns first

  const [isError, setIsError] = useState(false);

  return (
    <>
      {/* <h1>Value:{secondValue}</h1> */}
      <h1>{text || "Empty string"}</h1>
      <button className="btn" onClick={() => setIsError(!isError)}>
        Toggle Error
      </button>
      {/* returns 'Its empty' when the String is empty */}
      {/* {isError && <h1>Error is true </h1>} */}
      {isError ? <h1>Error is true</h1> : <TestComponent />}
    </>
  );
};

export default ShortCircuit;

###############################################################################
Now an example, that shows us the show/hide 
But also the importance of a cleanup function and that the [] on useEffect does not
save us all the time!

import { cleanup } from "@testing-library/react";
import React, { useState, useEffect } from "react";

const ShowHide = () => {
  const [show, setShow] = useState(false);
  return (
    <React.Fragment>
      <button
        className="btn"
        onClick={() => {
          setShow(!show);
        }}
      >
        Show/Hide
      </button>
      {show ? <Item /> : <></>}
    </React.Fragment>
  );
};

const Item = () => {
  const [size, setSize] = useState(window.innerWidth);

  const checkSize = () => {
    setSize(window.innerWidth);
  };

  useEffect(() => {
    console.log("In useEffect");
    window.addEventListener("resize", checkSize); //toggle is rerendering the Item component again and again, so just an empty dependency list wont work!
    //we will need to add a cleanup function to close the window event listener!
    return () => {
      window.removeEventListener("resize", checkSize);
    };
  }, []); //empty dependence so only initial render
  return (
    <div style={{ marginTop: "2rem" }}>
      <h1>window</h1>
      <h2>size: {size}</h2>
    </div>
  );
};
export default ShowHide;

//remember that cleanup function is always needed on some side effect functionality
//what was side effect? changing things outside the component
//will be needed for the eventListener on the DOM window