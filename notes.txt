#########################################
import React, { useState } from "react";

const ErrorExample = () => { //has to be uppercase
  // console.log(useState("Hello")); //returns an array [value, function_that_changes_that_value]
  // const value = useState("Aman")[0];
  // const handler = useState("Aman")[1];
  const [text, setText] = useState("Aman"); //hooks have to start with use
  //this is array destructuring btw
  //serves as initial value
  //text is the value, setText is the function which is invoked to change this value
  //convention is to use <var>, <setVar>
  const clickHandler = () => {
    if (text === "Aman") setText("Riya");
    else setText("Aman");
  };
  return (
    <React.Fragment>
      <div className="container">
        <h2>Hii {text}</h2>
        <button type="button" className="btn" onClick={clickHandler}>
          Change name
        </button>
      </div>
    </React.Fragment>
  );
};

export default ErrorExample;

#####################################################################


->>>>Hooks have to start with use
->>>>>the components that have hooks have to be UpperCase (TitleCase)
->>>>>the hook line cannot be defined outside function body
#####################################################################

import React from "react";
import { data } from "../../../data";
//can look at file for the example array
const UseStateArray = () => {
  const [people, setPeople] = React.useState(data); //data array, can import inline also
  const [action, setAction] = React.useState("Delete");
  const deletePeople = () => {
    if (people.length > 0) {
      setPeople([]);
      setAction("Get Back");
    } else {
      setPeople(data);
      setAction("Delete");
    }
  };

  return (
    <>
      {people.map((person) => {
        const { id, name } = person;
        return (
          <div className="item" key={id}>
            <h4>{name}</h4>
          </div>
        );
      })}
      <button type="button" className="btn" onClick={deletePeople}>
        {action} People
      </button>
    </>
  );
};

export default UseStateArray;

#####################################################################

NOTE-> you can also define the hook function inside onClick = {}, but remember it should 
be an arrow {()=>function} because simple { function()} will get invoked immediately

let newPeople = people.filter((person) => person.id != id);
FILTER METHOD IS IMPORTANT, just like map!

import React from "react";
import { data } from "../../../data";
//can look at file for the example array
const UseStateArray = () => {
  const [people, setPeople] = React.useState(data); //data array, can import inline also
  const [action, setAction] = React.useState("Delete");
  const deletePeople = () => {
    if (people.length > 0) {
      setPeople([]);
      setAction("Get Back");
    } else {
      setPeople(data);
      setAction("Delete");
    }
  };
  const removeItem = (id) => {
    //filter out the matching id;
    let newPeople = people.filter((person) => person.id != id);
    setPeople(newPeople);
    if (newPeople.length > 0) setAction("Delete");
    else setAction("Get Back");
  };
  return (
    <>
      {people.map((person) => {
        const { id, name } = person;
        return (
          <div className="item" key={id}>
            <h4>{name}</h4>
            <button type="button" onClick={() => removeItem(id)}>
              Remove
            </button>
          </div>
        );
      })}
      <button type="button" className="btn" onClick={deletePeople}>
        {action} People
      </button>
    </>
  );
};

export default UseStateArray;


#AGAIN V V V IMP, if passing argument to function, always make it arrow function rather than just reference
or else it will get invoked RIGHT AWAY!

###############################################################################
For OBJECTS:

const UseStateObject = () => {
  const [person, setPerson] = useState({
    name: "Peter",
    age: "24",
    message: "Random message",
  });
  console.log(person);
  function changeMessage() {
    // setPerson("Hello world!"); //this will wipe out the whole obj and replace with one string!
    //SO USE A SPREAD OPERATOR!!
    setPerson({ ...person, message: "Hello world" });
  }

###############################################################################
  const UseStateCounter = () => {
  const [value, setValue] = useState(0);
  const complexIncrease = () => {
    setTimeout(() => {
      // setValue(value + 1);
      setValue((prevState) => {
        //basically have an other arrow function inside, parameter is prevValue
        return prevState + 1; //always return something!
      });
    }, 2000);
  };

  //does not work if you click multiple times before 2 seconds are up!!
  //the setValue function is async
  return (
    <React.Fragment>
      <section
        style={{ margin: "4rem 0", padding: "2rem 0", border: "2px solid red" }}
      >
        <h2>Regular counter</h2>
        <h1>{value}</h1>
        <button className="btn" onClick={() => setValue(value - 1)}>
          Decrease
        </button>
        <button className="btn" onClick={() => setValue(0)}>
          Reset
        </button>
        <button className="btn" onClick={() => setValue(value + 1)}>
          Increase
        </button>
      </section>
      <br />
      <section
        style={{ margin: "4rem 0", padding: "2rem 0", border: "2px solid red" }}
      >
        <h2>Complex counter</h2>
        <h1>{value}</h1>
        <button className="btn" onClick={complexIncrease}>
          Increase later
        </button>
      </section>
    </React.Fragment>
  );
};

###############################################################################

USE EFFECT:

// by default runs after every re-render**
// cleanup function
// second parameter
const UseEffectBasics = () => {
  const [value, setValue] = useState(0);
  useEffect(() => {
    //stuff inside callback will run on every render
    console.log("Called after every render");
    if (value > 0) document.title = `New messages(${value})`;
  });
  console.log("Render component");
  return (
    <>
      <h2>{value}</h2>
      <button type="button" className="btn" onClick={() => setValue(value + 1)}>
        Change
      </button>
    </>
  );
};

export default UseEffectBasics;

//useEffects used when we want to set up some side effects outside of the component
//it runs at every re-render and hence can be used to change the title of the page and all
//data fetching, listening for events, signing up for subscriptions
//HOOKS CANT BE SET INSIDE IF

###############################################################################

// by default runs after every re-render
// cleanup function
// second parameter**
const UseEffectBasics = () => {
  const [value, setValue] = useState(0);
  useEffect(() => {
    //stuff inside callback will run on every render
    console.log("Called after every render");
    if (value > 0) document.title = `New messages(${value})`;
    // });//can also pass 2nd argument here!
  }, [value]); //if empty, it is not called on re-render
  console.log("Render component");
  return (
    <>
      <h2>{value}</h2>
      <button type="button" className="btn" onClick={() => setValue(value + 1)}>
        Change
      </button>
    </>
  );
};

export default UseEffectBasics;

//what else about the 2nd parameter?
//that array has values, and the function will run only if any of the values present in the
//array is changed. So if 'value' is changed by the setValue function, then the useEffect will run.
//otherwise it will not run.
//can have more than one useEffects! if you have another one with empty array then it will
//not be run on further re-renders!

###############################################################################

CLEANUP function
import React, { useState, useEffect } from "react";

// cleanup function
// second argument

const UseEffectCleanup = () => {
  const [size, setSize] = useState(window.innerWidth);

  const checkSize = () => {
    setSize(window.innerWidth);
    // window.removeEventListener("resize", checkSize); if I add this, then the value also stops changing!
  };
  useEffect(
    () => {
      console.log("There is a rerender");
      window.addEventListener("resize", checkSize); //it's checkSize, not checkSize()
      // return () => {
      //   console.log("Cleanup");
      //   window.removeEventListener("resize", checkSize);
      // };
    } /*,[]*/
  );
  return (
    <>
      <h1>window</h1>
      <h2>{size}</h2>
    </>
  );
};

export default UseEffectCleanup;

//want to set up a listener on the browser window
//remember - useState automatically triggers a rerender because of value change
//eventListener added each and everytime if:
//1. [] is not included
//2. cleanup is not applied
//eventListener is diff - once created it stays unless destroyed or cleaned up!
//this part if unclear is best understood thru video:
//https://youtu.be/4UZrsTqkcW4?t=19043
//whenever you set up side effects, it is good practice to set up cleanup functions to avoid
//too many listeners being created and having a memory leak

